// Generated by CoffeeScript 1.10.0
(function() {
  var _global, exports, heterarchy, isJavaScriptClass, is_class, javaScriptClassNames, javaScriptClasses,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof window !== "undefined") {
    exports = (window.JsUml = {});
    heterarchy = window.heterarchy;
    _global = window;
  } else if (typeof global !== "undefined") {
    exports = module.exports;
    _global = global;
  }

  is_class = function(obj) {
    return typeof obj === "function" && (obj.prototype != null);
  };

  javaScriptClassNames = ["Array", "Boolean", "Date", "Error", "Function", "Number", "RegExp", "String", "Object", "EvalError", "RangeError", "ReferenceError", "SyntaxError", "TypeError", "URIError", "Symbol", "Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array", "Map", "Set", "WeakMap", "WeakSet", "ArrayBuffer", "DataView", "Promise", "Generator", "GeneratorFunction", "Reflect", "Proxy"];

  javaScriptClasses = javaScriptClassNames.reduce(function(classes, name) {
    classes[_global[name]] = _global[name];
    return classes;
  }, {});

  isJavaScriptClass = function(cls) {
    return javaScriptClasses[cls] === cls;
  };

  exports.generateUml = function() {
    var base, bases, classes, cls, i, j, k, len, len1, len2, name, namespace, namespaces, plant_uml;
    namespaces = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    classes = [];
    for (i = 0, len = namespaces.length; i < len; i++) {
      namespace = namespaces[i];
      for (name in namespace) {
        cls = namespace[name];
        if (is_class(cls) && indexOf.call(classes, cls) < 0) {
          classes.push(cls);
        }
      }
    }
    plant_uml = "@startuml\n";
    for (j = 0, len1 = classes.length; j < len1; j++) {
      cls = classes[j];
      if (cls.__bases__ != null) {
        bases = cls.__bases__;
      } else if (cls.__super__) {
        bases = [cls.__super__.constructor];
      } else {
        bases = [];
      }
      for (k = 0, len2 = bases.length; k < len2; k++) {
        base = bases[k];
        plant_uml += base.name + " <|-- " + cls.name + "\n";
      }
    }
    plant_uml += "@enduml";
    return console.log(plant_uml);
  };

}).call(this);
